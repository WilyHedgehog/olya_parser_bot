import nats
from nats.aio.client import Client
from nats.js import JetStreamContext
from nats.js.api import StreamConfig, RetentionPolicy
from logging import getLogger
from config.config import load_config
import asyncio
config = load_config()

logger = getLogger(__name__)

 
_nc: Client | None = None
_js: JetStreamContext | None = None
_lock = asyncio.Lock()


async def get_nats_connection() -> tuple[Client, JetStreamContext]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ NATS –∏–ª–∏ —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤–æ–µ.
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ –¥–ª—è –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ–≥–æ (async) –¥–æ—Å—Ç—É–ø–∞.
    """
    global _nc, _js

    async with _lock:
        # –ï—Å–ª–∏ —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∂–∏–≤–æ–µ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
        if _nc and _nc.is_connected:
            return _nc, _js

        # –ò–Ω–∞—á–µ —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        _nc = await nats.connect(config.nats.servers)
        _js = _nc.jetstream()
        return _nc, _js


async def close_nats_connection():
    """–ê–∫–∫—É—Ä–∞—Ç–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å NATS –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –±–æ—Ç–∞."""
    global _nc
    if _nc and _nc.is_connected:
        await _nc.close()


async def setup_vacancy_stream(js):
    # –ü—Ä–æ–≤–µ—Ä–∏–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ—Ç–æ–∫
    streams = await js.streams_info()
    if any(stream.config.name == "VACANCY_TASKS" for stream in streams):
        logger.info("‚úÖ Stream VACANCY_TASKS —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return

    await js.add_stream(
        StreamConfig(
            name="VACANCY_TASKS",
            subjects=["vacancy.queue"],
            retention=RetentionPolicy.WORK_QUEUE,
        )
    )
    logger.info("üöÄ Stream VACANCY_TASKS —Å–æ–∑–¥–∞–Ω")