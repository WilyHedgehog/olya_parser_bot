from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from config.config import load_config
from db.requests import (
    get_all_professions,
    get_all_keywords_from_profession,
    get_profession_by_id,
    get_all_stopwords,
    get_vacancy_by_id,
    get_admins_list,
)
from db.crud import (
    get_upcoming_mailings,
)

config = load_config()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é


back_to_admin_main = InlineKeyboardButton(
    text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É ‚óÄÔ∏è", callback_data="back_to_admin"
)
back_to_proffs_kb_button = InlineKeyboardButton(
    text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é –ø–∞—Ä—Å–µ—Ä–∞ ‚óÄÔ∏è", callback_data="back_to_proffs"
)
from_admin_add_proff = InlineKeyboardButton(
    text="–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏—é", callback_data="add_proff"
)
from_admin_delete_proff = InlineKeyboardButton(
    text="–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏—é", callback_data="delete_proff"
)
from_admin_add_proffs_desc = InlineKeyboardButton(
    text="–î–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏", callback_data="add_proffs_desc"
)
from_admin_delete_proffs_desc = InlineKeyboardButton(
    text="–£–¥–∞–ª–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —É –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏", callback_data="delete_proffs_desc"
)
from_admin_add_keyword = InlineKeyboardButton(
    text="–î–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ", callback_data="add_keyword"
)
from_admin_delete_keyword = InlineKeyboardButton(
    text="–£–¥–∞–ª–∏—Ç—å –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ", callback_data="delete_keyword"
)
back_to_choosen_prof = InlineKeyboardButton(
    text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ ‚óÄÔ∏è", callback_data="back_to_choosen_prof"
)
stopwords_add = InlineKeyboardButton(
    text="–î–æ–±–∞–≤–∏—Ç—å —Å—Ç–æ–ø-—Å–ª–æ–≤–∞", callback_data="stopwords_add"
)
stopwords_delete = InlineKeyboardButton(
    text="–£–¥–∞–ª–∏—Ç—å —Å—Ç–æ–ø-—Å–ª–æ–≤–∞", callback_data="stopwords_delete"
)
button_divider = InlineKeyboardButton(text="‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì", callback_data="---")
parser_menu_button = InlineKeyboardButton(
    text="üîç –ú–µ–Ω—é –ø–∞—Ä—Å–µ—Ä–∞ üîç", callback_data="parser_menu"
)
get_file_id_button = InlineKeyboardButton(
    text="üÜî –ü–æ–ª—É—á–∏—Ç—å file_id üÜî", callback_data="get_file_id"
)
mailing_settings_button = InlineKeyboardButton(
    text="üõ† –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å—Å—ã–ª–æ–∫ üõ†", callback_data="mailing_settings"
)
add_delete_admin_button = InlineKeyboardButton(
    text="üë§ –î–æ–±–∞–≤–∏—Ç—å/–£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞ üë§", callback_data="add_delete_admin"
)
back_to_mailing = InlineKeyboardButton(
    text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é —Ä–∞—Å—Å—ã–ª–æ–∫ ‚óÄÔ∏è", callback_data="back_to_mailing"
)
delete_mailing_button = InlineKeyboardButton(
    text="–£–¥–∞–ª–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="delete_mailing"
)
add_mailing_button = InlineKeyboardButton(
    text="–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="add_mailing"
)
back_to_start_menu_button = InlineKeyboardButton(
    text="üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞ üîô", callback_data="back_to_start_menu"
)


def admin_keyboard(super_admin: bool) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.row(parser_menu_button)
    builder.row(get_file_id_button)
    builder.row(mailing_settings_button)
    if super_admin:
        builder.row(add_delete_admin_button)
    builder.row(button_divider)
    builder.row(back_to_start_menu_button)
    builder.adjust(1)  # –†–∞—Å–ø–æ–ª–∞–≥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–∏–Ω —Å—Ç–æ–ª–±–µ—Ü
    return builder.as_markup()


def mailing_settings_keyboard() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.row(add_mailing_button)
    builder.row(delete_mailing_button)
    builder.row(button_divider)
    builder.row(back_to_admin_main)
    builder.adjust(1)  # –†–∞—Å–ø–æ–ª–∞–≥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–∏–Ω —Å—Ç–æ–ª–±–µ—Ü
    return builder.as_markup()


async def professions_keyboard(
    page: int = 1,
    per_page: int = 4,  # 2 columns * 3 rows (–æ—Å—Ç–∞–ª—å–Ω—ã–µ 2 —Å—Ç—Ä–æ–∫–∏ –ø–æ–¥ –Ω–∞–≤–∏–≥–∞—Ü–∏—é –∏ back)
) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    professions = await get_all_professions()
    total = len(professions)
    if total == 0:
        builder.row(from_admin_add_proff)
        builder.row(back_to_admin_main)
        return builder.as_markup()

    total_pages = (total + per_page - 1) // per_page
    page = max(1, min(page, total_pages))

    start = (page - 1) * per_page
    end = start + per_page
    page_profs = professions[start:end]

    for prof in page_profs:
        builder.button(text=prof.name, callback_data=f"proff_{prof.id}")

    # –†–∞—Å–∫–ª–∞–¥—ã–≤–∞–µ–º proff-–∫–Ω–æ–ø–∫–∏ –ø–æ 2 –≤ —Å—Ç—Ä–æ–∫–µ
    builder.adjust(1)

    if total_pages > 1:
        nav_buttons = []
        if page > 1:
            nav_buttons.append(
                InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"ppage_{page-1}")
            )
        else:
            nav_buttons.append(InlineKeyboardButton(text=" ", callback_data="noop"))

        nav_buttons.append(
            InlineKeyboardButton(text=f"{page}/{total_pages}", callback_data="noop")
        )

        if page < total_pages:
            nav_buttons.append(
                InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"ppage_{page+1}")
            )
        else:
            nav_buttons.append(InlineKeyboardButton(text=" ", callback_data="noop"))

        builder.row(*nav_buttons)
    builder.row(button_divider)
    # –ö–Ω–æ–ø–∫–∞ –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É
    builder.row(from_admin_add_proff)
    stopwords = await get_all_stopwords()
    if stopwords:
        builder.row(stopwords_add)
        builder.row(stopwords_delete)
    else:
        builder.row(stopwords_add)
    builder.row(back_to_admin_main)

    return builder.as_markup()


async def choosen_prof_keyboard(profession_id: int) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    profession = await get_profession_by_id(profession_id)
    if not profession:
        builder.button(text="–ü—Ä–æ—Ñ–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", callback_data="noop")
        builder.row(back_to_proffs_kb_button)
        return builder.as_markup()

    if not profession.keywords:
        builder.row(from_admin_add_keyword)
    else:
        builder.row(from_admin_add_keyword, from_admin_delete_keyword)

    if profession.desc:
        builder.row(from_admin_delete_proffs_desc)
    else:
        builder.row(from_admin_add_proffs_desc)
    builder.row(from_admin_delete_proff)
    builder.row(back_to_proffs_kb_button)
    return builder.as_markup()


async def keywords_keyboard(
    profession_id: int,
    page: int = 1,
    per_page: int = 8,  # 2 columns * 4 rows (–æ—Å—Ç–∞–ª—å–Ω—ã–µ 2 —Å—Ç—Ä–æ–∫–∏ –ø–æ–¥ –Ω–∞–≤–∏–≥–∞—Ü–∏—é –∏ back)
) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()

    keywords = await get_all_keywords_from_profession(profession_id)
    total = len(keywords)

    total_pages = (total + per_page - 1) // per_page
    page = max(1, min(page, total_pages))

    start = (page - 1) * per_page
    end = start + per_page
    page_keywords = keywords[start:end]

    for kw in page_keywords:
        builder.button(text=kw.word, callback_data=f"keyword_{kw.id}")

    # –†–∞—Å–∫–ª–∞–¥—ã–≤–∞–µ–º keyword-–∫–Ω–æ–ø–∫–∏ –ø–æ 2 –≤ —Å—Ç—Ä–æ–∫–µ (–º–∞–∫—Å 4 —Å—Ç—Ä–æ–∫–∏ –ø—Ä–∏ per_page=8)
    builder.adjust(2)

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è (–µ—Å–ª–∏ –±–æ–ª—å—à–µ 1 —Å—Ç—Ä–∞–Ω–∏—Ü—ã)
    if total_pages > 1:
        nav_buttons = []
        if page > 1:
            nav_buttons.append(
                InlineKeyboardButton(
                    text="‚¨ÖÔ∏è", callback_data=f"kwpage_{profession_id}_{page-1}"
                )
            )
        else:
            nav_buttons.append(InlineKeyboardButton(text=" ", callback_data="noop"))

        nav_buttons.append(
            InlineKeyboardButton(text=f"{page}/{total_pages}", callback_data="noop")
        )

        if page < total_pages:
            nav_buttons.append(
                InlineKeyboardButton(
                    text="‚û°Ô∏è", callback_data=f"kwpage_{profession_id}_{page+1}"
                )
            )
        else:
            nav_buttons.append(InlineKeyboardButton(text=" ", callback_data="noop"))

        builder.row(*nav_buttons)
    builder.row(button_divider)

    # –ö–Ω–æ–ø–∫–∞ –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è–º
    builder.row(back_to_choosen_prof)

    return builder.as_markup()


async def stopwords_keyboard(
    page: int = 1,
    per_page: int = 8,  # 2 columns * 4 rows (–æ—Å—Ç–∞–ª—å–Ω—ã–µ 2 —Å—Ç—Ä–æ–∫–∏ –ø–æ–¥ –Ω–∞–≤–∏–≥–∞—Ü–∏—é –∏ back)
) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()

    stopwords = await get_all_stopwords()
    total = len(stopwords)

    total_pages = (total + per_page - 1) // per_page
    page = max(1, min(page, total_pages))

    start = (page - 1) * per_page
    end = start + per_page
    page_stopwords = stopwords[start:end]

    for sw in page_stopwords:
        builder.button(text=sw.word, callback_data=f"stopword_{sw.id}")

    # –†–∞—Å–∫–ª–∞–¥—ã–≤–∞–µ–º stopword-–∫–Ω–æ–ø–∫–∏ –ø–æ 2 –≤ —Å—Ç—Ä–æ–∫–µ (–º–∞–∫—Å 4 —Å—Ç—Ä–æ–∫–∏ –ø—Ä–∏ per_page=8)
    builder.adjust(2)

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è (–µ—Å–ª–∏ –±–æ–ª—å—à–µ 1 —Å—Ç—Ä–∞–Ω–∏—Ü—ã)
    if total_pages > 1:
        nav_buttons = []
        if page > 1:
            nav_buttons.append(
                InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"swpage_{page-1}")
            )
        else:
            nav_buttons.append(InlineKeyboardButton(text=" ", callback_data="noop"))

        nav_buttons.append(
            InlineKeyboardButton(text=f"{page}/{total_pages}", callback_data="noop")
        )

        if page < total_pages:
            nav_buttons.append(
                InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"swpage_{page+1}")
            )
        else:
            nav_buttons.append(InlineKeyboardButton(text=" ", callback_data="noop"))

        builder.row(*nav_buttons)

    builder.row(button_divider)
    # –ö–Ω–æ–ø–∫–∞ –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è–º
    builder.row(back_to_proffs_kb_button)

    return builder.as_markup()


async def get_delete_mailing_kb(
    page: int = 1,
    per_page: int = 10,  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—Å—Å—ã–ª–æ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
) -> InlineKeyboardMarkup:

    builder = InlineKeyboardBuilder()
    mailings = await get_upcoming_mailings(limit=30)
    if not mailings:
        builder.row(
            InlineKeyboardButton(
                text="–ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫", callback_data="noop"
            )
        )
        builder.row(back_to_mailing)
        return builder.as_markup()

    total = len(mailings)

    total_pages = (total + per_page - 1) // per_page
    page = max(1, min(page, total_pages))

    start = (page - 1) * per_page
    end = start + per_page
    page_mailings = mailings[start:end]

    for m in page_mailings:
        display_text = f"{m.task_name} | {m.run_at.strftime('%Y-%m-%d %H:%M')}"
        builder.button(
            text=display_text,
            callback_data=f"delete_mailing_{m.id}",
        )

    builder.adjust(1)

    if total_pages > 1:
        nav_buttons = []
        if page > 1:
            nav_buttons.append(
                InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"mpage_{page-1}")
            )
        else:
            nav_buttons.append(InlineKeyboardButton(text=" ", callback_data="noop"))

        nav_buttons.append(
            InlineKeyboardButton(text=f"{page}/{total_pages}", callback_data="noop")
        )

        if page < total_pages:
            nav_buttons.append(
                InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"mpage_{page+1}")
            )
        else:
            nav_buttons.append(InlineKeyboardButton(text=" ", callback_data="noop"))

        builder.row(*nav_buttons)

    # –†–∞—Å–∫–ª–∞–¥—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 1 –≤ —Å—Ç—Ä–æ–∫–µ
    builder.adjust(1)
    builder.row(button_divider)
    builder.row(back_to_admin_main)
    return builder.as_markup()


async def delete_admin_keyboard() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    admins = await get_admins_list()
    if not admins:
        builder.row(
            InlineKeyboardButton(text="–ù–µ—Ç –∞–¥–º–∏–Ω–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", callback_data="noop")
        )
        builder.row(back_to_admin_main)
        return builder.as_markup()

    for admin in admins:
        admin_id = str(admin.telegram_id)
        builder.button(
            text=f"{admin.full_name}",
            callback_data=f"del_admin_{admin_id}",
        )
    return builder.as_markup()


async def get_delete_vacancy_kb(vacancy_id) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(
            text="–£–¥–∞–ª–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é", callback_data="delete_vacancy_" + str(vacancy_id)
        )
    )
    return builder.as_markup()


async def get_vacancy_url_kb(vacancy_id: str) -> InlineKeyboardMarkup:
    vacancy = await get_vacancy_by_id(vacancy_id)
    builder = InlineKeyboardBuilder()
    if not vacancy:
        builder.row(
            InlineKeyboardButton(text="–í–∞–∫–∞–Ω—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", callback_data="noop")
        )
        return builder.as_markup()
    elif vacancy.admin_chat_url is None:
        builder.row(
            InlineKeyboardButton(
                text="–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é", url=vacancy.url
            )
        )
        return builder.as_markup()
    else:
        builder.row(
            InlineKeyboardButton(
                text="–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é –≤ –∞–¥–º–∏–Ω-—á–∞—Ç–µ", url=vacancy.admin_chat_url
            )
        )
        return builder.as_markup()


back_to_choosen_prof_kb = InlineKeyboardMarkup(inline_keyboard=[[back_to_choosen_prof]])

back_to_proffs_kb = InlineKeyboardMarkup(inline_keyboard=[[back_to_proffs_kb_button]])

back_to_admin_main_kb = InlineKeyboardMarkup(inline_keyboard=[[back_to_admin_main]])
