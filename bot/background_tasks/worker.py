import json
import logging
from parser.parser_bot import process_message
from parser.telethon_client import app
from telethon.tl.types import InputPeerChannel, PeerChannel

logger = logging.getLogger(__name__)

async def vacancy_worker(js):
    sub = await js.pull_subscribe("vacancy.queue", durable="vacancy_worker")
    logger.info("üöÄ –í–æ—Ä–∫–µ—Ä –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç –æ—á–µ—Ä–µ–¥—å 'vacancy.queue'")
    while True:
        try:
            msgs = await sub.fetch(1, timeout=5)
        except Exception:
            continue  # –Ω–∏—á–µ–≥–æ –Ω–µ—Ç, –∂–¥—ë–º –¥–∞–ª—å—à–µ
        
        for msg in msgs:
            try:
                data = json.loads(msg.data.decode())
                logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω–∞ –∑–∞–¥–∞—á–∞: {data}")
                message_id = data.get("message_id")
                chat_id = data.get("chat_id")

                # –ü–æ–ª—É—á–∞–µ–º entity
                try:
                    entity = await app.get_entity(chat_id)
                except Exception as e:
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å entity –¥–ª—è chat_id={chat_id}: {e}")
                    await msg.nak()
                    continue

                # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                try:
                    message = await app.get_messages(entity, ids=message_id)
                except Exception as e:
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id} –∏–∑ {chat_id}: {e}")
                    await msg.nak()
                    continue

                if not message:
                    logger.warning(f"‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ {message_id} –∏–∑ —á–∞—Ç–∞ {chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                    await msg.nak()
                    continue

                await process_message(message)
                await msg.ack()
                logger.info(f"‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {data}")

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á–∏: {e}")
                await msg.nak()