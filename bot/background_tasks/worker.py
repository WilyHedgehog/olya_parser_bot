import json
import logging
from parser.parser_bot import process_message
from parser.telethon_client import app

logger = logging.getLogger(__name__)

async def vacancy_worker(js):
    sub = await js.pull_subscribe("vacancy.queue", durable="vacancy_worker")
    logger.info("üöÄ –í–æ—Ä–∫–µ—Ä –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç –æ—á–µ—Ä–µ–¥—å 'vacancy.queue'")
    while True:
        try:
            msgs = await sub.fetch(1, timeout=5)
        except Exception:
            continue  # –Ω–∏—á–µ–≥–æ –Ω–µ—Ç, –∂–¥—ë–º –¥–∞–ª—å—à–µ
        
        for msg in msgs:
            try:
                data = json.loads(msg.data.decode())
                logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω–∞ –∑–∞–¥–∞—á–∞: {data}")
                message_id = data["message_id"]
                chat_id = data["chat_id"]

                message = await app.get_messages(chat_id, ids=message_id)
                await process_message(message)

                await msg.ack()
                logger.info(f"‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {data}")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á–∏: {e}")
                await msg.nak()