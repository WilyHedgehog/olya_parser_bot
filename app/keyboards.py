from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from datetime import datetime, timedelta
from lexicon import LEXICON_BUTTONS
from dotenv import load_dotenv
from zoneinfo import ZoneInfo
import os
from app.parser_database import load_config

load_dotenv()


MONTH_SHORT = {
    1: "—è–Ω–≤",
    2: "—Ñ–µ–≤",
    3: "–º–∞—Ä",
    4: "–∞–ø—Ä",
    5: "–º–∞–π",
    6: "–∏—é–Ω",
    7: "–∏—é–ª",
    8: "–∞–≤–≥",
    9: "—Å–µ–Ω",
    10: "–æ–∫—Ç",
    11: "–Ω–æ—è",
    12: "–¥–µ–∫",
}

WEEKDAYS_SHORT = {0: "–ü–Ω", 1: "–í—Ç", 2: "–°—Ä", 3: "–ß—Ç", 4: "–ü—Ç", 5: "–°–±", 6: "–í—Å"}


ALLOWED_WEEKDAYS = [2, 3, 4]




add_word_button = InlineKeyboardButton(
    text="–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–∞", callback_data="add_word_button"
)
add_chanel_button = InlineKeyboardButton(
    text="–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data="add_chanel_button"
)
delete_word_button = InlineKeyboardButton(
    text="–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ", callback_data="delete_word_button"
)


def generate_keywords_keyboard():
    config = load_config()
    keywords = config.get("keywords", [])

    kb = InlineKeyboardBuilder()
    for word in keywords:
        kb.add(InlineKeyboardButton(text=word, callback_data=f"del_kw:{word}"))
    kb.adjust(2)  # –∫–Ω–æ–ø–∫–∏ –ø–æ 2 –≤ —Ä—è–¥
    return kb.as_markup()


admin_panel_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [add_word_button, delete_word_button],
        [add_chanel_button],
    ]
)






main_menu_button = InlineKeyboardButton(
    text="üîô –ù–∞–∑–∞–¥ –≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"
)
begin_button = InlineKeyboardButton(
    text="–Ø —Å–æ–≥–ª–∞—Å–µ–Ω/—Å–æ–≥–ª–∞—Å–Ω–∞", callback_data="begin_button_click"
)
first_time_button = InlineKeyboardButton(
    text="–Ø –ø–µ—Ä–≤—ã–π —Ä–∞–∑", callback_data="first_time_button_click"
)
old_guy_button = InlineKeyboardButton(
    text="–ü–æ–≤—Ç–æ—Ä–Ω–∞—è —Å–µ—Å—Å–∏—è", callback_data="old_guy_button_click"
)
new_booking_button = InlineKeyboardButton(
    text="üÜï –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å", callback_data="new_booking_button_click"
)
cancel_booking_button = InlineKeyboardButton(
    text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data="cancel_booking_button_click"
)
admin_cancel_booking = InlineKeyboardButton(
    text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data="admin_cancel_booking"
)
requisites_buton = InlineKeyboardButton(
    text="üí∞ –°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã", callback_data="requisites_buton_click"
)
check_booking_button = InlineKeyboardButton(
    text="üóì –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏", callback_data="check_booking_button_click"
)
send_to_all_button = InlineKeyboardButton(
    text="‚úâÔ∏è –†–∞—Å—Å—ã–ª–∫–∞ –ø–æ –±–∞–∑–µ", callback_data="send_to_all_button_click"
)
admin_button = InlineKeyboardButton(
    text="‚öôÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_button_click"
)
send_to_client = InlineKeyboardButton(
    text="üí¨ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±–µ—â–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", callback_data="send_to_client"
)
confirm_meeting = InlineKeyboardButton(
    text="‚òëÔ∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="confirm_meeting"
)
one_more_message = InlineKeyboardButton(
    text="üí¨ –ï—â—ë –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="one_more_message"
)
confirm_mailing = InlineKeyboardButton(
    text="‚òëÔ∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –ø–æ –±–∞–∑–µ", callback_data="confirm_mailing"
)
tests_main_button = InlineKeyboardButton(
    text="üìù –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", callback_data="test_button"
)
docs_tests_button = InlineKeyboardButton(
    text="üíø Google –î–∏—Å–∫", callback_data="drive_tests_button"
)
online_tests_button = InlineKeyboardButton(
    text="üíª –û–Ω–ª–∞–π–Ω-—Ñ–æ—Ä–º–∞—Ç", callback_data="online_tests_button"
)
back_to_tests_button = InlineKeyboardButton(
    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_test_button"
)
add_to_mentoring = InlineKeyboardButton(
    text="üßë‚Äçüßí –î–æ–±–∞–≤–∏—Ç—å –≤ –Ω–∞—Å—Ç–∞–≤–Ω–∏—á–µ—Å—Ç–≤–æ", callback_data="add_to_mentoring"
)
delete_from_mentoring = InlineKeyboardButton(
    text="üöÆ –£–¥–∞–ª–∏—Ç—å –∏–∑ –Ω–∞—Å—Ç–∞–≤–Ω–∏—á–µ—Å—Ç–∞", callback_data="delete_from_mentoring"
)
check_mentoring = InlineKeyboardButton(
    text="‚ùî –ö—Ç–æ —Å–µ–π—á–∞—Å –≤ –Ω–∞—Å—Ç–∞–≤–Ω–∏—á–µ—Å—Ç–≤–µ", callback_data="check_mentoring"
)
change_name = InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è", callback_data="change_name")
check_booking_by_user = InlineKeyboardButton(
    text="üìç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="check_booking_by_user"
)
check_booking_by_week = InlineKeyboardButton(
    text="üïí –ó–∞–ø–∏—Å–∏ –Ω–∞ –Ω–µ–¥–µ–ª—é –≤–ø–µ—Ä–µ–¥", callback_data="check_booking_by_week"
)
choose_user = InlineKeyboardButton(
    text="üîç –í—ã–±—Ä–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="choose_user"
)
back_to_user_button = InlineKeyboardButton(
    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", callback_data="back_to_user_button_click"
)
close_access = InlineKeyboardButton(
    text="üö´ –í–µ—Ä–Ω—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ", callback_data="close_access"
)
open_access = InlineKeyboardButton(
    text="‚úÖ –î–∞—Ç—å —Ç–æ—Å—Ç—É–ø –∫ 50-–º–∏–Ω—É—Ç–Ω—ã–º —Å–µ—Å—Å–∏–∏—è–º", callback_data="open_access"
)
check_tasks = InlineKeyboardButton(
    text="üìÇ –ú–µ–Ω—é –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á", callback_data="check_tasks"
)
task_one = InlineKeyboardButton(
    text="1Ô∏è‚É£ –í—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–æ–º–µ–Ω—É –∑–∞–ø–∏—Å–∏", callback_data="task_one"
)
task_two = InlineKeyboardButton(
    text="2Ô∏è‚É£ –í—ã–∫–ª—é—á–∏—Ç—å —Å–º–µ–Ω—É —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="task_two"
)
yes_button = InlineKeyboardButton(text="‚òëÔ∏è –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é", callback_data="yes_button")

tasks_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[[task_one], [task_two], [back_to_user_button]]
)

yes_keyboard = InlineKeyboardMarkup(inline_keyboard=[[yes_button]])


def generate_user_events_kb(events: list, action: str):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Å–æ–±—ã—Ç–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    action: 'cancel' –∏–ª–∏ 'reschedule'
    –ù–∞ –∫–Ω–æ–ø–∫–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú –ß–ß:–ú–ú.
    """
    kb = InlineKeyboardBuilder()
    for event in events:
        start_time_str = event["start"].get("dateTime", event["start"].get("date"))
        start_dt = datetime.fromisoformat(start_time_str)
        formatted_time = start_dt.strftime("%d.%m %H:%M")
        kb.button(text=formatted_time, callback_data=f"{action}:{event['id']}")
    kb.adjust(1)  # 1 –∫–Ω–æ–ø–∫–∞ –≤ —Ä—è–¥—É
    kb.row(main_menu_button)

    return kb.as_markup()


def build_hours_keyboard_with_datetime(
    date: datetime.date, free_keys: list[str]
) -> InlineKeyboardBuilder:
    builder = InlineKeyboardBuilder()

    # –ö–Ω–æ–ø–∫–∏ —Å–æ —Å–ª–æ—Ç–∞–º–∏
    for key in free_keys:
        time_str = LEXICON_BUTTONS[key]  # '10:00', '12:00' –∏ —Ç.–¥.
        dt_iso = datetime.combine(
            date, datetime.strptime(time_str, "%H:%M").time()
        ).isoformat()
        builder.button(text=time_str, callback_data=f"slot:{dt_iso}")

    builder.adjust(3)  # –ø–æ 3 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –æ—Ç–¥–µ–ª—å–Ω—ã–º —Ä—è–¥–æ–º
    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back"))

    return builder


def generate_days_keyboard(page: int = 0) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    days_found = 0
    # —Å–º–µ—â–∞–µ–º –Ω–∞ (2 –¥–Ω—è + –Ω–æ–º–µ—Ä_—Å—Ç—Ä–∞–Ω–∏—Ü—ã * 6)
    current_day = datetime.now(ZoneInfo("Europe/Moscow")) + timedelta(days=2 + page * 6)

    # –ù–∞—Ö–æ–¥–∏–º 6 –±–ª–∏–∂–∞–π—à–∏—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–Ω–µ–π
    while days_found < 6:
        if current_day.weekday() in ALLOWED_WEEKDAYS:
            weekday = WEEKDAYS_SHORT[current_day.weekday()]
            month = MONTH_SHORT[current_day.month]
            day_text = f"{weekday} {current_day.day} {month}"
            callback = f"day:{current_day.strftime('%Y-%m-%d')}"
            builder.button(text=day_text, callback_data=callback)
            days_found += 1
        current_day += timedelta(days=1)

    # –†–∞–∑–±–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 3 –≤ —Ä—è–¥
    builder.adjust(3)

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –≤–ø–µ—Ä–µ–¥/–Ω–∞–∑–∞–¥
    nav_buttons = []
    if page > 0:
        nav_buttons.append(
            InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"calendar_page:{page-1}"
            )
        )
    nav_buttons.append(
        InlineKeyboardButton(text="‚û°Ô∏è –í–ø–µ—Ä—ë–¥", callback_data=f"calendar_page:{page+1}")
    )
    builder.row(*nav_buttons)

    builder.row(main_menu_button)

    return builder.as_markup()


def get_manage_booking_keyboard(user_id):
    admin_ids = [
        x.strip() for x in os.environ.get("ADMIN_ID", "").split(",") if x.strip()
    ]
    is_admin = str(user_id) in admin_ids

    kb_builder = InlineKeyboardBuilder()
    buttons: list[InlineKeyboardButton] = [
        new_booking_button,
        cancel_booking_button,
        requisites_buton,
    ]
    kb_builder.row(*buttons, width=2)

    kb_builder.row(check_booking_button)
    kb_builder.row(tests_main_button)

    if is_admin:
        kb_builder.row(admin_button)

    return kb_builder.as_markup()


def get_requisites_keyboard(user_id):
    admin_ids = [
        x.strip() for x in os.environ.get("ADMIN_ID", "").split(",") if x.strip()
    ]
    is_admin = str(user_id) in admin_ids

    kb_builder = InlineKeyboardBuilder()
    buttons = (
        InlineKeyboardButton(text="–¢-–ë–∞–Ω–∫", callback_data="tbank"),
        InlineKeyboardButton(text="–°–±–µ—Ä–ë–∞–Ω–∫", callback_data="sberbank"),
        InlineKeyboardButton(text="GetCourse", callback_data="getcourse"),
    )

    kb_builder.row(*buttons, width=1)

    if is_admin:
        kb_builder.row(InlineKeyboardButton(text="PayPal", callback_data="paypal"))
        kb_builder.row(
            InlineKeyboardButton(text="–ü—Ä–∏–≤–∞—Ç–ë–∞–Ω–∫", callback_data="privatbank")
        )

    kb_builder.row(main_menu_button)

    return kb_builder.as_markup()


choose_user_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [send_to_client],
        [confirm_meeting],
        [check_booking_by_user],
        [add_to_mentoring],
        [delete_from_mentoring],
        [close_access],
        [open_access],
        [change_name],
        [check_tasks],
        [admin_cancel_booking],
        [admin_button],
    ]
)


admin_panel_v2_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [choose_user],
        [send_to_all_button],
        [check_mentoring],
        [check_booking_by_week],
        [main_menu_button],
    ]
)


back_to_requisites_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_requisites_button_click"
            )
        ]
    ]
)


manage_booking_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[[new_booking_button, cancel_booking_button]]
)


begin_keyboard = InlineKeyboardMarkup(inline_keyboard=[[begin_button]])


tests_main_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[[docs_tests_button], [online_tests_button], [main_menu_button]]
)


back_to_tests_keyboard = InlineKeyboardMarkup(inline_keyboard=[[back_to_tests_button]])


is_first_time_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[[first_time_button, old_guy_button]]
)


new_messsage_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[[one_more_message], [back_to_user_button]]
)


back_to_admin_keyboard = InlineKeyboardMarkup(inline_keyboard=[[admin_button]])

back_to_user_keyboard = InlineKeyboardMarkup(inline_keyboard=[[back_to_user_button]])

send_to_all_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[[confirm_mailing], [admin_button]]
)


main_menu_keyboard = InlineKeyboardMarkup(inline_keyboard=[[main_menu_button]])
