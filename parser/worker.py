import json
import logging
import asyncio
from parser.parser_bot import process_message
from parser.telethon_client import app
from telethon.errors import MessageIdInvalidError
from schemas.message_payload import MessagePayload

MAX_RETRIES = 3  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏
logger = logging.getLogger(__name__)

async def vacancy_worker(js):
    sub = await js.pull_subscribe("vacancy.queue", durable="vacancy_worker")
    logger.info("üöÄ –í–æ—Ä–∫–µ—Ä –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç –æ—á–µ—Ä–µ–¥—å 'vacancy.queue'")

    while True:
        try:
            msgs = await sub.fetch(1, timeout=5)
        except Exception:
            continue  # –Ω–∏—á–µ–≥–æ –Ω–µ—Ç, –∂–¥—ë–º –¥–∞–ª—å—à–µ

        for msg in msgs:
            try:
                # --- ‚úÖ –î–µ–∫–æ–¥–∏—Ä—É–µ–º –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º payload ---
                payload = MessagePayload.model_validate_json(msg.data.decode())
                logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω–∞ –∑–∞–¥–∞—á–∞ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è {payload.id} –∏–∑ —á–∞—Ç–∞ {payload.chat_id}")

                # --- ‚úÖ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é ---
                await process_message(payload)

                # --- ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∑–∞–¥–∞—á—É ---
                await msg.ack()
                logger.info(f"‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: message_id={payload.id}")

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á–∏: {e}")
                await msg.nak()
        #await asyncio.sleep(0.5)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–¥–∞—á–∞–º–∏